package com.redis;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.boot.SpringApplication;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


import redis.clients.jedis.Jedis;

//@RestController
//@RequestMapping("server")
public class clientcontroller {
 public static String datainport,key,value,instance,server;
	@RequestMapping("/getData")
	public static String client() throws Exception {
		Properties prop = new Properties();
		InputStream input = clientcontroller.class.getClassLoader().getResourceAsStream("application.properties");
		prop.load(input);
		 int port=(int) Long.parseLong(instance);  
	 // JSONObject obj = new JSONObject(data);
		//String server = obj.getString("server");
		//int port = obj.getInt("port");
		Jedis jedis = new Jedis("192.168.195.233", 6379);
         try {
         String serverstring =jedis.get(server);
         JSONObject object = new JSONObject(serverstring);
		 JSONArray n1 = object.getJSONArray("instance");
		 for (int i = 0; i <n1.length(); i++) {
		  int key = n1.getJSONObject(i).getInt("port");
		 if( port == key ) {
		 JSONObject value =n1.getJSONObject(i); 
		 datainport=value.toString();
		 System.out.println(datainport);
		 }}
		 }finally {
			 jedis.close();
		 }
		return datainport;
	
		 }
	public static void main(String[] args) throws IOException {
        //String port="8085";
		server="10.37.56.1";
		instance="8088";
       // String frequency = args[1];
        int time=(int) Long.parseLong("3000");  
        
		//SpringApplication.run(Server1Application.class, args);
		ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor();
		ses.scheduleAtFixedRate(new Runnable() {
		    @Override
		    public void run() {
		       try {
		    	 client();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    }
		}, 0, time, TimeUnit.MILLISECONDS);
	}
}
